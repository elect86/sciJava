/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.10"
    // jitpack & gradle portal
    `maven-publish`

    `kotlin-dsl`

    id("com.gradle.plugin-publish") version "0.12.0"

    `version-catalog`
}

group = "com.github.elect86"
version = "0.0.6"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

pluginBundle {
    website = "https://github.com/elect86/sciJava/tree/master"
    vcsUrl = "https://github.com/elect86/sciJava.git"
    tags = listOf("sciJava")
}

gradlePlugin {
    // Define the plugin
    plugins.create("sciJava") {
        //        id = "sciJava.greeting"
        id = "sciJava"
        displayName = "sciJava plugin"
        description = "plugin to easier version alignment for sciJava in Gradle"
        implementationClass = "sciJava.SciJavaPlugin"
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations.getByName("functionalTestImplementation").extendsFrom(configurations.getByName("testImplementation"))

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

val check by tasks.getting(Task::class) {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

publishing {
    publications.register("mavenJava", MavenPublication::class) {
        from(components["java"])
//        artifact(sourceJar)
    }
}


publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["versionCatalog"])
        }
    }
}

java.withSourcesJar()

catalog {
    versionCatalog {
        alias("batch-processor").to("org.scijava:batch-processor:0.4.1")
    }
}