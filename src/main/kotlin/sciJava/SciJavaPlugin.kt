/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sciJava

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.w3c.dom.Node
import org.xml.sax.InputSource
import java.io.StringReader
import java.net.URL
import javax.xml.parsers.DocumentBuilderFactory

val pom = getPom(base = false, version = "29.2.1")

val pomBase = getPom(base = true, version = "11.2.0")

fun getPom(base: Boolean, version: String): String {
    var name = "pom-scijava"
    if (base)
        name += "-base"
    val adr = "https://maven.scijava.org/content/groups/public/org/scijava/$name/$version/$name-$version.pom"
    return URL(adr).readText()
}

/**
 * A simple 'hello world' plugin.
 */
class SciJavaPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Register a task
        project.tasks.register("greeting") { task ->
            task.doLast {
                println("Hello from plugin 'sciJava.greeting'")

                readKotlinVersion()
                fillDeps()

                deps.forEach { (k, v) -> println("[$k] $v") }
            }
        }
    }
}

fun readKotlinVersion() {

    val dbFactory = DocumentBuilderFactory.newInstance()
    val dBuilder = dbFactory.newDocumentBuilder()
    val doc = dBuilder.parse(InputSource(StringReader(pomBase)))

    //optional, but recommended
    //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
    doc.documentElement.normalize()

    for (i in 0 until doc.documentElement.childNodes.length) {
        val child = doc.documentElement.childNodes.item(i)

        if (child.nodeName == "properties")

            for (j in 0 until child.childNodes.length) {
                val prop = child.childNodes.item(j)

                if (prop.nodeType == Node.ELEMENT_NODE && prop.nodeName == "kotlin.version")
                    deps["kotlin"] = prop.textContent
            }
    }
}

fun fillDeps() {

    val dbFactory = DocumentBuilderFactory.newInstance()
    val dBuilder = dbFactory.newDocumentBuilder()
    val doc = dBuilder.parse(InputSource(StringReader(pom)))

    //optional, but recommended
    //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
    doc.documentElement.normalize()

    for (i in 0 until doc.documentElement.childNodes.length) {
        val child = doc.documentElement.childNodes.item(i)

        if (child.nodeName == "properties")

            for (j in 0 until child.childNodes.length) {
                val prop = child.childNodes.item(j)

                if (prop.nodeType == Node.ELEMENT_NODE && prop.nodeName.endsWith(".version")) {

                    val dep = prop.nodeName.dropLast(8)
                    val content = prop.textContent
                    deps[dep] = when {
                        content.startsWith("\${") && content.endsWith(".version}") -> { // ${imagej1.version}
                            val resolve = content.drop(2).dropLast(9)
                            deps[resolve] ?: error("cannot resolve $resolve")
                        }
                        else -> content
                    }
                }
            }
    }
}

val deps = mutableMapOf<String, String>()