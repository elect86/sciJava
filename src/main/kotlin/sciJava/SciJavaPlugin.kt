/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sciJava

import org.gradle.api.*
import org.gradle.api.tasks.TaskAction
import org.gradle.kotlin.dsl.configure
import org.gradle.kotlin.dsl.create
import org.w3c.dom.Node
import org.xml.sax.InputSource
import java.io.StringReader
import java.net.URL
import javax.xml.parsers.DocumentBuilderFactory


fun getPom(base: Boolean, version: String): String {
    var name = "pom-scijava"
    if (base)
        name += "-base"
    val adr = "https://maven.scijava.org/content/groups/public/org/scijava/$name/$version/$name-$version.pom"
    return URL(adr).readText()
}

open class SciJavaPluginExtension {
    var pomVersion = "29.2.1"
    var pomBaseVersion = "11.2.0"
    var pom = getPom(base = false, version = pomVersion)
    var pomBase = getPom(base = true, version = pomBaseVersion)
}

class SciJavaTask : DefaultTask() {
    override fun doFirst(action: Action<in Task>): Task {
        println("SciJavaTask::doFirst")
        return this
    }
    override fun doLast(action: Action<in Task>): Task {
        println("SciJavaTask::doLast")
        return this
    }
    @TaskAction
    fun run() = println("SciJavaTask::run")
}

class SciJavaPlugin : Plugin<Project> {
//    init {
//        println("SciJavaPlugin::init")
//    }
    override fun apply(project: Project) {
//        println("SciJavaPlugin::apply")

        val sciJava = project.extensions.create<SciJavaPluginExtension>("sciJava")
        project.tasks.create<SciJavaTask>("SciJavaTask")

        readKotlinVersion(sciJava.pomBase)
        fillDeps(sciJava.pom)
    }

    fun readKotlinVersion(pom: String) {

        val dbFactory = DocumentBuilderFactory.newInstance()
        val dBuilder = dbFactory.newDocumentBuilder()
        val doc = dBuilder.parse(InputSource(StringReader(pom)))

        //optional, but recommended
        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
        doc.documentElement.normalize()

        for (i in 0 until doc.documentElement.childNodes.length) {
            val child = doc.documentElement.childNodes.item(i)

            if (child.nodeName == "properties")

                for (j in 0 until child.childNodes.length) {
                    val prop = child.childNodes.item(j)

                    if (prop.nodeType == Node.ELEMENT_NODE && prop.nodeName == "kotlin.version")
                        versions["kotlin"] = prop.textContent
                }
        }
    }

    fun fillDeps(pom: String) {

        val dbFactory = DocumentBuilderFactory.newInstance()
        val dBuilder = dbFactory.newDocumentBuilder()
        val doc = dBuilder.parse(InputSource(StringReader(pom)))

        //optional, but recommended
        //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
        doc.documentElement.normalize()

        for (i in 0 until doc.documentElement.childNodes.length) {
            val child = doc.documentElement.childNodes.item(i)

            if (child.nodeName == "properties")

                for (j in 0 until child.childNodes.length) {
                    val prop = child.childNodes.item(j)

                    if (prop.nodeType == Node.ELEMENT_NODE && prop.nodeName.endsWith(".version")) {

                        val dep = prop.nodeName.dropLast(8)
                        val content = prop.textContent
                        versions[dep] = when {
                            content.startsWith("\${") && content.endsWith(".version}") -> { // ${imagej1.version}
                                val resolve = content.drop(2).dropLast(9)
                                versions[resolve] ?: error("cannot resolve $resolve")
                            }
                            else -> content
                        }
                    }
                }
        }
    }
}

fun Project.sciJava(block: SciJavaPluginExtension.() -> Unit) = extensions.configure(block)

val versions = mutableMapOf<String, String>()